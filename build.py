import json
import toml
from zipfile import ZipFile, ZIP_DEFLATED
import os
import shutil

with open("./info.json", "r") as file:
    info = json.load(file)

if not os.path.isdir("./build"):
    os.mkdir("./build")


def fabric():
    return json.dumps(
        {
            "schemaVersion": 1,
            "id": info["modid"],
            "version": info["version"],
            "name": info["name"],
            "description": info["description"],
            "authors": list(info["contributors"].keys()),
            "contact": {
                "homepage": info["homepage"],
                "sources": info["sources"],
                "issues": info["issues"],
            },
            "license": info["license"],
            "icon": info["icon"],
            "environment": "*",
            "depends": {"fabric-resource-loader-v0": "*"},
        }
    )


def quilt():
    return json.dumps(
        {
            "schema_version": 1,
            "quilt_loader": {
                "group": "com.modrinth",
                "id": info["modid"],
                "version": info["version"],
                "metadata": {
                    "name": info["name"],
                    "description": info["description"],
                    "contributors": info["contributors"],
                    "contact": {
                        "homepage": info["homepage"],
                        "sources": info["sources"],
                        "issues": info["issues"],
                    },
                    "icon": info["icon"],
                },
                "intermediate_mappings": "net.fabricmc:intermediary",
                "depends": [
                    {
                        "id": "quilt_resource_loader",
                        "versions": "*",
                        "unless": "fabric-resource-loader-v0",
                    }
                ],
            },
        }
    )


def forge():
    return toml.dumps(
        {
            "modLoader": "lowcodefml",
            "loaderVersion": "[40,)",
            "license": info["license"],
            "showAsResourcePack": False,
            "mods": [
                {
                    "modId": info["modid"],
                    "version": info["version"],
                    "displayName": info["name"],
                    "description": info["description"],
                    "logoFile": info["icon"],
                    "updateJSONURL": f"https://api.modrinth.com/updates/{info['slug']}/forge_updates.json",
                    "credits": "Generated by Modrinth",
                    "authors": list(info["contributors"].keys()),
                    "displayURL": info["homepage"],
                }
            ],
            "issueTrackerURL": info["issues"],
        }
    )


def neoforge():
    return toml.dumps(
        {
            "modLoader": "javafml",
            "loaderVersion": "[1,)",
            "license": info["license"],
            "showAsResourcePack": False,
            "mods": [
                {
                    "modId": info["modid"],
                    "version": info["version"],
                    "displayName": info["name"],
                    "description": info["description"],
                    "logoFile": info["icon"],
                    "updateJSONURL": f"https://api.modrinth.com/updates/{info['slug']}/forge_updates.json?neoforge=only",
                    "credits": "Generated by Modrinth",
                    "authors": list(info["contributors"].keys()),
                    "displayURL": info["homepage"],
                }
            ],
            "issueTrackerURL": info["issues"],
        }
    )

def zip_dir(folder_path, zip_file):
    for foldername, subfolders, filenames in os.walk(folder_path):
        for filename in filenames:
            file_path = os.path.join(foldername, filename)
            zip_file.write(file_path, os.path.join(folder_path, os.path.relpath(file_path, folder_path)))

with ZipFile("build/keyconomy.zip", "w") as file:
    zip_dir("./data", file)
    file.write("./pack.mcmeta")
    file.write("./pack.png")

with ZipFile("build/keyconomy.jar", "w") as file:
    zip_dir("./data", file)
    file.write("./pack.mcmeta")
    file.write("./pack.png")
    file.writestr("fabric.mod.json", fabric())
    file.writestr("quilt.mod.json", quilt())
    file.writestr("META-INF/mods.toml", forge())
    file.writestr("META-INF/neoforge.mods.toml", neoforge())